name: CI/CD Maven + Docker + AWS

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]


env:
  DOCKER_IMAGE: lior4321/simple-java-maven-app

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    # Checkout code
    - name: Checkout repository
      uses: actions/checkout@v4

    # Set up Java 21 for Maven
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven

    # Build and test with Maven    
    - name: Build with Maven
      run: mvn clean package

    # --- Auto-bump Patch Version in pom.xml ---
    - name: Auto-bump Patch Version in pom.xml
      id: bump
      run: |
        version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Current version: $version"

        major=$(echo $version | cut -d'.' -f1)
        minor=$(echo $version | cut -d'.' -f2)
        patch=$(echo $version | cut -d'.' -f3)
        
        if [[ -z "$patch" ]]; then patch=0; fi
        
        new_version="$major.$minor.$((patch+1))"
        echo "Bumped version: $new_version"
        mvn versions:set -DnewVersion="$new_version"
        echo "new_version=$new_version" >> $GITHUB_OUTPUT

    # Commit version bump to repo
    - name: Commit & Push new version
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "Version ${{ steps.bump.outputs.new_version }}"
        file_pattern: 'pom.xml'

    # Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Build and push Docker image (multi-stage)
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ env.DOCKER_IMAGE }}:${{ steps.bump.outputs.new_version }}

    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}

  deploy-to-aws:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to AWS EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 54.80.78.12
          username: ubuntu
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          script: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker pull ${{ env.DOCKER_IMAGE }}:${{ needs.build.outputs.new_version }}
            docker stop myapp || true
            docker rm myapp || true
            docker run -d --name myapp -p 80:8080 ${{ env.DOCKER_IMAGE }}:${{ needs.build.outputs.new_version }}

